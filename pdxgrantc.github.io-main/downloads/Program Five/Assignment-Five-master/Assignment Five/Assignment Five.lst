Microsoft (R) Macro Assembler Version 14.29.30138.0	    02/27/22 21:48:58
Random Integer Sorte					     Page 1 - 1


				TITLE Random Integer Sorter 

				; CS 271
				; Assignment Five
				; 2/27/2022
				; Name: Grant Conklin

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000000C8			MIN EQU 200
 = 0000000F			MAX EQU 15
 = 00000064			LO EQU 100
 = 000003E7			HI EQU 999

 00000000			.data
				; INTRO strings
 00000000 52 61 6E 64 6F	titleStr	BYTE	"Random Integer Sorter", 0			; 22 bytes
	   6D 20 49 6E 74
	   65 67 65 72 20
	   53 6F 72 74 65
	   72 00
 00000016 50 72 6F 67 72	myName		BYTE	"Programed by Grant Conklin", 0		; 27 bytes
	   61 6D 65 64 20
	   62 79 20 47 72
	   61 6E 74 20 43
	   6F 6E 6B 6C 69
	   6E 00
 00000031 54 68 69 73 20	whatDoes	BYTE	"This program generates random numbers in the range [100 .. 999]", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 00
 00000071 64 69 73 70 6C	displays	BYTE	"displays the original list, sorts the list, and calculates the", 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 00
 000000B0 6D 65 64 69 61	median	 	BYTE	"median value. Finally, it displays the list sorted in descending order.", 0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00
				; GET DATA strings
 000000F8 48 6F 77 20 6D	howMany		BYTE	"How many numbers should be generated? [15 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   35 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 0000012C 49 6E 76 61 6C	invalid		BYTE	"Invalid input", 0
	   69 64 20 69 6E
	   70 75 74 00
				; DISPLAY UNSORTED string
 0000013A 54 68 65 20 75	unsorted	BYTE	"The unsorted random numbers:", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 00
				; DISPLAY MEDIAN string
 00000157 54 68 65 20 6D	whatMedian	BYTE	"The median is: ", 0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
				; DISPLAY SORTED string
 00000167 54 68 65 20 73	sorted		BYTE	"The sorted list:", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 00
				; GOODBYE string
 00000178 49 20 74 68 69	TA		BYTE	"I think my TA is Sadie Thomas.", 0
	   6E 6B 20 6D 79
	   20 54 41 20 69
	   73 20 53 61 64
	   69 65 20 54 68
	   6F 6D 61 73 2E
	   00
 00000197 54 68 61 6E 6B	thanks		BYTE	"Thanks for using my program!", 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 00
 000001B4 00000000		userInput	DWORD	?
 000001B8  000000C8 [		ary			DWORD    200    DUP(?)								; set to 200 which is the max number the user can enter to avoid heap memory
	    00000000
	   ]

 00000000			.code
				; Procedure to drive and push/pop from stack for program
				; recieves: nothing
				; returns: nothing
				; preconditions: .data segment
				; registers changed: eax
 00000000			main PROC
				; this is a series of function calls before each the data is pushed on the stack and then popped to clean the stack after a fucntion call
 00000000  E8 00000000 E		call	Randomize											; seeding the random number generator
 00000005  68 000000B0 R		push	OFFSET			median
 0000000A  68 00000071 R		push	OFFSET			displays
 0000000F  68 00000031 R		push	OFFSET			whatDoes
 00000014  68 00000016 R		push	OFFSET			myName
 00000019  68 00000000 R		push	OFFSET			titleStr
 0000001E  E8 000000B4			call	intro	
					; clean stack of depricated variables
 00000023  58				pop		eax
 00000024  58				pop		eax
 00000025  58				pop		eax
 00000026  58				pop		eax
 00000027  58				pop		eax

 00000028  68 000001B4 R		push	OFFSET			userInput							; pass by reference ie address	
 0000002D  68 0000012C R		push	OFFSET			invalid
 00000032  68 000000F8 R		push	OFFSET			howMany
 00000037  E8 000000E8			call	getData	
					; clean stack of depricated variables
 0000003C  58				pop		eax
 0000003D  58				pop		eax
 0000003E  58				pop		eax

 0000003F  FF 35 000001B4 R		push	userInput											; pass by value ie without the RAM address (doubles as array lenth)
 00000045  68 000001B8 R		push	OFFSET			ary	
 0000004A  E8 0000010B			call	fillAry	
					; clean stack of depricated variables
 0000004F  58				pop		eax
 00000050  58				pop		eax

 00000051  68 0000013A R		push	OFFSET			unsorted
 00000056  FF 35 000001B4 R		push	userInput
 0000005C  68 000001B8 R		push	OFFSET			ary
 00000061  E8 00000119			call	displayAry	
					; clean stack of depricated variables
 00000066  58				pop		eax
 00000067  58				pop		eax
 00000068  58				pop		eax

 00000069  E8 00000000 E		call	crlf

 0000006E  FF 35 000001B4 R		push	userInput
 00000074  68 000001B8 R		push	OFFSET			ary
 00000079  E8 0000014A			call	sortary	
					; clean stack of depricated variables
 0000007E  58				pop		eax
 0000007F  58				pop		eax

 00000080  E8 00000000 E		call	crlf

 00000085  68 00000157 R		push	OFFSET			whatMedian
 0000008A  FF 35 000001B4 R		push	userInput
 00000090  68 000001B8 R		push	OFFSET			ary
 00000095  E8 00000151			call	findMedian	
					; clean stack of depricated variables
 0000009A  58				pop		eax
 0000009B  58				pop		eax
 0000009C  58				pop		eax

 0000009D  E8 00000000 E		call	crlf

 000000A2  68 00000167 R		push	OFFSET			sorted
 000000A7  FF 35 000001B4 R		push	userInput
 000000AD  68 000001B8 R		push	OFFSET			ary
 000000B2  E8 000000C8			call	displayAry	
					; clean stack of depricated variables
 000000B7  58				pop		eax
 000000B8  58				pop		eax
 000000B9  58				pop		eax

 000000BA  E8 00000000 E		call	crlf

					; STRING Variables pushed onto stack
					;push	OFFSET			thanks
					;push	OFFSET			sorted
					;push	OFFSET			whatMedian
					;push	OFFSET			unsorted
					;push	OFFSET			invalid
					;push	OFFSET			howMany

								
 000000BF  68 00000178 R		push	OFFSET			TA
 000000C4  68 00000197 R		push	OFFSET			thanks
 000000C9  E8 00000171			call	goodbye		
 000000CE  58				pop		eax
 000000CF  58				pop		eax
					exit
 000000D0  6A 00	   *	    push   +000000000h
 000000D2  E8 00000000 E   *	    call   ExitProcess
 000000D7			main ENDP


				; Procedure to print hello and other information
				; recieves: string pointers on the stack
				; returns: nothing
				; preconditions: string pointers pushed on stack
				; registers changed: edx
 000000D7			intro PROC
					; setting up stack frame
 000000D7  55				push    ebp
 000000D8  8B EC			mov		ebp, esp
					
 000000DA  8B 55 08			mov		edx, [ebp + 8]										; this is the offset for the address on the stack
 000000DD  E8 00000000 E		call	WriteString
 000000E2  E8 00000000 E		call	crlf
 000000E7  8B 55 0C			mov		edx, [ebp + 12]										; this is the offset for the address on the stack
 000000EA  E8 00000000 E		call	WriteString
 000000EF  E8 00000000 E		call	crlf
 000000F4  8B 55 10			mov		edx, [ebp + 16]										; this is the offset for the address on the stack
 000000F7  E8 00000000 E		call	WriteString
 000000FC  E8 00000000 E		call	crlf
 00000101  8B 55 14			mov		edx, [ebp + 20]										; this is the offset for the address on the stack
 00000104  E8 00000000 E		call	WriteString
 00000109  E8 00000000 E		call	crlf
 0000010E  8B 55 18			mov		edx, [ebp + 24]										; this is the offset for the address on the stack
 00000111  E8 00000000 E		call	WriteString
 00000116  E8 00000000 E		call	crlf
 0000011B  E8 00000000 E		call	crlf

					; returning stack frame to previous value
 00000120  8B E5			mov		esp, ebp        
 00000122  5D				pop		ebp              
 00000123  C3				ret                  
 00000124			intro ENDP

				; Procedure to print instruction and take integer input
				; recieves: string pointers on the stack
				; returns: nothing
				; preconditions: string pointers pushed on stack
				; registers changed: eax, edx
 00000124			getData PROC
					; setting up stack frame
 00000124  55				push    ebp
 00000125  8B EC			mov		ebp, esp
 00000127				askValue:
 00000127  8B 55 08				mov		edx,		[ebp + 8]							; this is the offset for the address on the stack
 0000012A  E8 00000000 E			call	WriteString
 0000012F  E8 00000000 E			call	readInt
 00000134					checkLower:												; check the lower bound for validation
 00000134  3D 000000C8					cmp	eax,		MIN
 00000139  7F 0C					jg	outsideBounds
 0000013B					checkUpper:												; check the upper bound for validation
 0000013B  83 F8 0F					cmp	eax,		MAX
 0000013E  7C 07					jl	outsideBounds
 00000140  8B 5D 10					mov	ebx,		[ebp + 16]
 00000143  89 03					mov	[ebx],		eax		
 00000145  EB 0F					jmp	endProc
 00000147					outsideBounds:											; print statment and while jump if outside bounds 
 00000147  8B 55 0C					mov		edx,		[ebp + 12]
 0000014A  E8 00000000 E				call	WriteString
 0000014F  E8 00000000 E				call	crlf
 00000154  EB D1					jmp		askValue
 00000156				endProc:
 00000156  8B E5			mov		esp, ebp        
 00000158  5D				pop		ebp              
 00000159  C3				ret  
 0000015A			getData	ENDP

				; Procedure to fill the ary with random integers
				; recieves: ary referecne ary len value
				; returns: filled ary which is passed by reference
				; preconditions: ary reference and length is pushed on the stack
				; registers changed: eax, ecx, edx, esi
 0000015A			fillAry PROC
					; setting up stack frame
 0000015A  55				push		ebp
 0000015B  8B EC			mov ebp,	esp

					; setting esi and ecx to parse throgh the array
 0000015D  8B 75 08			mov	esi,	[ebp + 8]
 00000160  8B 4D 0C			mov ecx,	[ebp + 12]
					; logic to fill the ary
 00000163				createNumLoop:
 00000163					createRandVal:
							; gets a random value between hi and lo in eax
 00000163  B8 000003E7					mov		eax,		hi											; finding the range from 1 for RandomRange
 00000168  83 E8 64					sub		eax,		lo
 0000016B  40						inc		eax			
 0000016C  E8 00000000 E				call	RandomRange												; get random number
 00000171  83 C0 64					add		eax,		lo											; add low to get bottom of range
 00000174					storeInAry:
 00000174  89 06					mov		[esi],		eax											; store random value in array
 00000176  83 C6 04					add		esi, 4
 00000179  E2 E8			loop createNumLoop														; repeat

 0000017B  8B E5			mov esp,	ebp        
 0000017D  5D				pop ebp   
 0000017E  C3				ret
 0000017F			fillAry ENDP

				; Procedure to print an array of integers
				; recieves: ary referecne ary len value
				; returns: nothing
				; preconditions: ary reference and length is pushed on the stack
				; registers changed: eax, ecx, edx, esi
 0000017F			displayAry PROC
					; setting up stack frame
 0000017F  55				push		ebp
 00000180  8B EC			mov ebp,	esp

					; logic to fill the ary
 00000182  8B 75 08			mov	esi,	[ebp + 8]
 00000185  8B 4D 0C			mov ecx,	[ebp + 12]
 00000188  8B 55 10			mov edx,	[ebp + 16]
					; printing the title
 0000018B  E8 00000000 E		call		crlf
 00000190  E8 00000000 E		call		WriteString
 00000195  E8 00000000 E		call		crlf
 0000019A  BA 00000000			mov	edx,	0
 0000019F				printLoop:																; outside loop to print the values
 0000019F  8B 06				mov		eax, [esi]
 000001A1  83 C6 04				add		esi, 4
 000001A4  E8 00000000 E			call	WriteInt
 000001A9  B0 20				mov		al,	' '														; space between values
 000001AB  E8 00000000 E			call WriteChar
 000001B0				checkNewLine:															; check the edx counter to see if 10 values have been printed
 000001B0  42						inc		edx
 000001B1  83 FA 0A					cmp		edx,		10
 000001B4  74 02					je		newLine
 000001B6  EB 0A					jmp		noNewLine
 000001B8					newLine:															; if edx==10 create new line
 000001B8  E8 00000000 E				call	crlf
 000001BD  BA 00000000					mov		edx,		0
 000001C2					noNewLine:
 000001C2  E2 DB			loop printLoop															; repeat for all of the array

 000001C4  8B E5			mov esp,	ebp        
 000001C6  5D				pop ebp   
 000001C7  C3				ret
 000001C8			displayAry ENDP

				; Procedure to fill the ary with random integers
				; recieves: ary referecne ary len value
				; returns: filled ary which is passed by reference
				; preconditions: ary reference and length is pushed on the stack
				; registers changed: eax, ecx, esi
 000001C8			sortary PROC
					; setting up stack frame
 000001C8  55				push		ebp
 000001C9  8B EC			mov ebp,	esp

					; setting up counters
 000001CB  8B 4D 0C			mov ecx,	[ebp + 12]			
 000001CE  49				dec ecx
 000001CF				L1:																		; outer loop with n-1
 000001CF  51					push ecx
 000001D0  8B 75 08				mov	 esi,		[ebp + 8]
 000001D3				L2:																		; inner loop to check decreasing sizes of space
 000001D3  8B 06				mov	 eax,		[esi]
 000001D5  39 46 04				cmp  [esi + 4],	eax													; check if less than
 000001D8  7C 05				jl	 L3																	
 000001DA					swap:																; swap
 000001DA  87 46 04					xchg eax,		[esi + 4]	
 000001DD  89 06					mov  [esi],		eax
 000001DF				L3:																		; incrementing and loop instructions 
 000001DF  83 C6 04				add	 esi,		4
 000001E2  E2 EF				loop L2
 000001E4  59					pop  ecx
 000001E5  E2 E8				loop L1

 000001E7  8B E5			mov esp,	ebp        
 000001E9  5D				pop ebp   
 000001EA  C3				ret
 000001EB			sortary ENDP

				; Procedure to print the median of a sorted integer array
				; recieves: ary referecne ary len value
				; returns: filled ary which is passed by reference
				; preconditions: ary reference which is sorted and length both pushed on the stack
				; registers changed: eax, esi, edx, ebx
 000001EB			findMedian PROC
					; setting up stack frame
 000001EB  55				push	ebp
 000001EC  8B EC			mov		ebp,	esp

 000001EE  8B 55 10			mov  edx,		[ebp + 16]
 000001F1  E8 00000000 E		call WriteString														; writing the median text
 000001F6  8B 75 08			mov		esi,	[ebp + 8]
 000001F9  8B 45 0C			mov		eax,	[ebp + 12]
 000001FC  BB 00000002			mov		ebx,	2
 00000201  BA 00000000			mov		edx,	0
 00000206  F7 F3			div		ebx	
 00000208  83 FA 01			cmp		edx,	1
 0000020B  74 02			je		index															; no remainder odd number of items in the array
 0000020D  EB 12			jmp		average

 0000020F				index:
 0000020F  BB 00000004				mov	 ebx,	4
 00000214  F7 E3				mul	 ebx															; to get length of DWORD from BYTE
 00000216  03 F0				add	 esi,	eax
 00000218  8B 06				mov  eax,	[esi]
 0000021A  E8 00000000 E			call WriteInt
 0000021F  EB 1A				jmp	 endPoint

 00000221				average:
 00000221  BB 00000004				mov	 ebx,	4
 00000226  F7 E3				mul	 ebx															; to get length of DWORD from BYTE
 00000228  03 F0				add	 esi,	eax
 0000022A  8B 06				mov  eax,	[esi]
 0000022C  03 46 04				add	 eax,	[esi + 4]
 0000022F  BB 00000002				mov	 ebx,	2
 00000234  F7 F3				div  ebx
 00000236  E8 00000000 E			call WriteInt
 0000023B				endPoint:

 0000023B  8B E5			mov esp,	ebp        
 0000023D  5D				pop ebp   
 0000023E  C3				ret
 0000023F			findMedian ENDP

				; Procedure to print goodbye message
				; recieves: string pointers on the stack
				; returns: nothing
				; preconditions: string pointers pushed on stack
				; registers changed: edx
 0000023F			goodbye PROC
					; setting up stack frame
 0000023F  55				push		ebp
 00000240  8B EC			mov ebp,	esp

 00000242  E8 00000000 E		call crlf
 00000247  8B 55 0C			mov	edx,	[ebp + 12]
 0000024A  E8 00000000 E		call WriteString			; guess the TA
 0000024F  E8 00000000 E		call crlf
 00000254  8B 55 08			mov  edx,	[ebp + 8]		; this is the offset for the address on the stack
 00000257  E8 00000000 E		call WriteString
 0000025C  E8 00000000 E		call crlf

 00000261  8B E5			mov esp,	ebp        
 00000263  5D				pop ebp   
 00000264  C3				ret
 00000265			goodbye	ENDP
				END main
Microsoft (R) Macro Assembler Version 14.29.30138.0	    02/27/22 21:48:58
Random Integer Sorte					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004D8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000265 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayAry . . . . . . . . . . .	P Near	 0000017F _TEXT	Length= 00000049 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 0000019F _TEXT	
  checkNewLine . . . . . . . . .	L Near	 000001B0 _TEXT	
  newLine  . . . . . . . . . . .	L Near	 000001B8 _TEXT	
  noNewLine  . . . . . . . . . .	L Near	 000001C2 _TEXT	
fillAry  . . . . . . . . . . . .	P Near	 0000015A _TEXT	Length= 00000025 Public STDCALL
  createNumLoop  . . . . . . . .	L Near	 00000163 _TEXT	
  createRandVal  . . . . . . . .	L Near	 00000163 _TEXT	
  storeInAry . . . . . . . . . .	L Near	 00000174 _TEXT	
findMedian . . . . . . . . . . .	P Near	 000001EB _TEXT	Length= 00000054 Public STDCALL
  index  . . . . . . . . . . . .	L Near	 0000020F _TEXT	
  average  . . . . . . . . . . .	L Near	 00000221 _TEXT	
  endPoint . . . . . . . . . . .	L Near	 0000023B _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000124 _TEXT	Length= 00000036 Public STDCALL
  askValue . . . . . . . . . . .	L Near	 00000127 _TEXT	
  checkLower . . . . . . . . . .	L Near	 00000134 _TEXT	
  checkUpper . . . . . . . . . .	L Near	 0000013B _TEXT	
  outsideBounds  . . . . . . . .	L Near	 00000147 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000156 _TEXT	
goodbye  . . . . . . . . . . . .	P Near	 0000023F _TEXT	Length= 00000026 Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 000000D7 _TEXT	Length= 0000004D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D7 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortary  . . . . . . . . . . . .	P Near	 000001C8 _TEXT	Length= 00000023 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001CF _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001D3 _TEXT	
  swap . . . . . . . . . . . . .	L Near	 000001DA _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000001DF _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 000000C8h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TA . . . . . . . . . . . . . . .	Byte	 00000178 _DATA	
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ary  . . . . . . . . . . . . . .	DWord	 000001B8 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displays . . . . . . . . . . . .	Byte	 00000071 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
howMany  . . . . . . . . . . . .	Byte	 000000F8 _DATA	
invalid  . . . . . . . . . . . .	Byte	 0000012C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 000000B0 _DATA	
myName . . . . . . . . . . . . .	Byte	 00000016 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted . . . . . . . . . . . . .	Byte	 00000167 _DATA	
thanks . . . . . . . . . . . . .	Byte	 00000197 _DATA	
titleStr . . . . . . . . . . . .	Byte	 00000000 _DATA	
unsorted . . . . . . . . . . . .	Byte	 0000013A _DATA	
userInput  . . . . . . . . . . .	DWord	 000001B4 _DATA	
whatDoes . . . . . . . . . . . .	Byte	 00000031 _DATA	
whatMedian . . . . . . . . . . .	Byte	 00000157 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
